{"remainingRequest":"C:\\Users\\GhostlySteel\\Desktop\\master\\frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\GhostlySteel\\Desktop\\master\\frontend\\src\\store\\modules\\posts.js","dependencies":[{"path":"C:\\Users\\GhostlySteel\\Desktop\\master\\frontend\\src\\store\\modules\\posts.js","mtime":1591552621812},{"path":"C:\\Users\\GhostlySteel\\Desktop\\master\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1591385434777},{"path":"C:\\Users\\GhostlySteel\\Desktop\\master\\frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1591385405969}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/Users/GhostlySteel/Desktop/master/frontend/src/store/modules/posts.js"],"names":["axios","state","posts","comments","getters","allPosts","actions","fetchPosts","commit","get","response1","data","results","response2","comms","addPost","user","content","location","category","groupID","username","now","Date","time","getTime","filterPosts","filterType","filterOption","console","log","setIsOpen","id","addComment","postID","mutations","changeIsOpen","i","length","isOpen","setPosts","createdPostsTemp","j","k","createdPosts","unshift","newPost","post","groupid","incrementPostIDs","plusComment","postIsOpen","indx","comment","sortPostsBy"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\nconst state = {\r\n    posts: [],\r\n    comments: []\r\n};\r\n\r\nconst getters = {\r\n    allPosts: (state) => state.posts\r\n};\r\n\r\nconst actions = {\r\n\r\n    async fetchPosts({ commit }) {\r\n        const response1 = await axios.get(\"http://127.0.0.1:8000/api/Post/\"); // TODO: setup backend to work with this part\r\n        const posts = response1.data.results\r\n\r\n        const response2 = await axios.get(\"http://127.0.0.1:8000/api/Comment/\"); // TODO: setup backend to work with this part\r\n        const comms = response2.data.results\r\n\r\n        commit('setPosts', {posts, comms});\r\n    },\r\n\r\n    async addPost({ commit }, {user, content, location, category, groupID, username}) {\r\n\r\n        //const response = await axios.post('http://127.0.0.1:8000/api/Post/', {newPost}); // TODO: setup backend to work with this part\r\n\r\n        const now = new Date();\r\n        var time = now.getTime();\r\n        commit('incrementPostIDs')\r\n        commit('newPost', {user, content, time, location, category, groupID, username})\r\n    },\r\n\r\n    async filterPosts({ commit }, {filterType, filterOption}) {\r\n\r\n        console.log(filterType, filterOption);\r\n\r\n        //const response = await axios.get('https://jsonplaceholder.typicode.com/posts?_filter=${filterType}'); // TODO: setup backend to work with this part\r\n\r\n        commit('sortPostsBy', {filterType, filterOption})\r\n        //TODO: filter local posts //commit('setPosts', {posts: state.posts, comms: state.comments});\r\n    },\r\n\r\n    async setIsOpen ({ commit }, id) {\r\n        commit('changeIsOpen', id)\r\n    },\r\n\r\n    async addComment ({ commit }, {content, postID, user}) {\r\n        commit('plusComment', {content, postID, user})\r\n    }\r\n};\r\n\r\nconst mutations = {\r\n\r\n    changeIsOpen: (state, id) => {\r\n        for (let i = 0; i < state.posts[state.posts[0].id - id].comments.length; i++) {\r\n            state.posts[state.posts[0].id - id].comments[i].isOpen = !state.posts[state.posts[0].id - id].comments[i].isOpen\r\n        }\r\n    },\r\n\r\n    setPosts: (state, {posts, comms}) => {\r\n\r\n        const createdPostsTemp = posts\r\n\r\n        for (let i = 0; i < posts.length; i++) {\r\n            if(posts[i].comments.length != 0) {\r\n                for (let j = 0; j < posts[i].comments.length; j++) {\r\n                    for (let k = 0; k < comms.length; k++) {\r\n                        if(posts[i].comments[j] === comms[k].id){\r\n                            createdPostsTemp[i].comments[j] = comms[k]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const createdPosts = []\r\n        for (let i = 0; i < createdPostsTemp.length; i++) {\r\n            createdPosts.unshift(createdPostsTemp[i])\r\n        }\r\n\r\n        state.posts = createdPosts\r\n        state.comments = comms\r\n\r\n    },\r\n\r\n    newPost: (state, {user, content, time, location, category, groupID, username}) => {\r\n        const post = {\r\n            user: user,\r\n            username: username,\r\n            id : state.posts[0].id + 1,\r\n            content: content,\r\n            time: time,\r\n            location: location,\r\n            category: category,\r\n            groupid: groupID,\r\n            comments: [{\r\n                id: 8,\r\n                content: \"---------------------------------\",\r\n                isOpen: false,\r\n                user: 6\r\n            }]\r\n        };\r\n        state.posts.unshift(post);\r\n    },\r\n\r\n    incrementPostIDs: (state) => {\r\n        for (let i = 0; i < state.posts.length; i++) {\r\n            state.posts[i].id = state.posts[i].id + 1\r\n        }\r\n    },\r\n\r\n    plusComment: (state, {content, postID, user}) => {\r\n        var postIsOpen = false;\r\n        for (let i = 0; i < state.posts[state.posts[0].id - postID].comments.length; i++) {\r\n            if (state.posts[state.posts[0].id - postID].comments[i].isOpen == true) {\r\n                postIsOpen = true\r\n            }\r\n        }\r\n\r\n        var indx = 0\r\n        for (let i = 0; i < state.comments.length; i++) {\r\n            indx = state.comments[i].id\r\n        }\r\n\r\n        const comment = {\r\n            id: indx + 1,\r\n            content: content,\r\n            isOpen: postIsOpen,\r\n            user: user\r\n        };\r\n        state.posts[state.posts[0].id - postID].comments.unshift(comment);\r\n    },\r\n\r\n    sortPostsBy: (state, {filterType, filterOption}) => {\r\n        switch (filterType) {\r\n            case 'Time':\r\n\r\n                switch (filterOption) {\r\n                    case 'Ascending':\r\n                        console.log(\"TODO: SORT BY ASCENDING ORDER ON BACK-END\")\r\n                        break;\r\n\r\n                    case 'Descending':\r\n                        console.log(\"TODO: SORT BY DESCENDING ORDER ON BACK-END\")\r\n                    break;    \r\n                \r\n                    default:\r\n                        console.log(\"SELECT A PROPER OPTION\")\r\n                        break;\r\n                }\r\n\r\n                break;\r\n\r\n            case 'Location':\r\n\r\n                console.log(\"Todo: SORT BY LOCATION ON SERVER SIDE USING: \", filterOption)\r\n\r\n                break;\r\n\r\n            case 'Category':\r\n\r\n                console.log(\"Todo: SORT BY CATEGORY ON SERVER SIDE USING: \", filterOption)\r\n\r\n                break;\r\n\r\n            case 'Group/User':\r\n\r\n                console.log(\"Todo: SORT BY GROUP/USER ON SERVER SIDE USING: \", filterOption)\r\n\r\n                break;\r\n        \r\n            default:\r\n                break;\r\n        }\r\n    }\r\n};\r\n\r\nexport default {\r\n    state,\r\n    getters,\r\n    actions,\r\n    mutations\r\n};"]}]}